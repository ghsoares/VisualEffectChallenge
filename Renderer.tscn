[gd_scene load_steps=7 format=2]

[ext_resource path="res://World.tscn" type="PackedScene" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D colorBalanceCurve;
uniform vec2 colorBalanceRange = vec2(0f, 1f);
uniform vec2 previewSize = vec2(128f, 32f);

varying vec2 v;

vec3 rgb_to_hsv(vec3 rgb) {
	vec3 c = rgb;
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv_to_rgb(vec3 hsv) {
	vec3 c = hsv;
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void vertex() {
	v = VERTEX;
}

void fragment() {
	vec4 col = texture(TEXTURE, UV);
	col.rgb = clamp(col.rgb, vec3(0f), vec3(1f));
	
	vec3 hsv = rgb_to_hsv(col.rgb);
	
	float amnt = texture(colorBalanceCurve, vec2(hsv.r)).r;
	amnt = mix(colorBalanceRange.x, colorBalanceRange.y, amnt);
	hsv.g *= amnt;
	
	col.rgb = hsv_to_rgb(hsv);
	
	/*if (v.x < previewSize.x && v.y < previewSize.y) {
		hsv = vec3(v.x / previewSize.x, .5f, 1f);
		
		amnt = texture(colorBalanceCurve, vec2(hsv.r)).r;
		amnt = mix(colorBalanceRange.x, colorBalanceRange.y, amnt);
		hsv.g *= amnt;
		
		col.rgb = hsv_to_rgb(hsv);
	}*/
	
	COLOR = col;
}



"

[sub_resource type="Curve" id=2]
_data = [ Vector2( 0, 0 ), 0.0, 3.14628, 0, 1, Vector2( 0.317835, 1 ), 0.0, 0.0, 0, 0, Vector2( 0.769055, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), -4.33003, 0.0, 1, 0 ]

[sub_resource type="CurveTexture" id=3]
curve = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/colorBalanceRange = Vector2( 1, 1.5 )
shader_param/previewSize = Vector2( 128, 32 )
shader_param/colorBalanceCurve = SubResource( 3 )

[sub_resource type="ViewportTexture" id=5]
viewport_path = NodePath("Viewport")

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 1024, 600 )
own_world = true
render_target_v_flip = true

[node name="World" parent="Viewport" instance=ExtResource( 1 )]

[node name="TextureRect" type="NinePatchRect" parent="."]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = SubResource( 5 )
region_rect = Rect2( 256, 150, 512, 300 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -256.0
margin_top = -150.0
margin_right = 256.0
margin_bottom = 150.0
